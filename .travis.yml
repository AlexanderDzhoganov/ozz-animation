language: cpp

dist: trusty
sudo: required

matrix:
  include:

  # Emscripten cross compiling
  - os: linux
    language: node_js
    node_js:
      - node
    services:
      - docker
    env:
    - env_build_emscripten=1

before_install:
- echo before_install----------------------------------------------------------
- docker run -dit --name emscripten -v $(pwd):/src trzeci/emscripten:sdk-master-64bit bash

install:
- echo install-----------------------------------------------------------------
# Download and install mesa dev
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then
    sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev;
  fi
# Download and install fbx sdk
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then
    mkdir fbx;
    cd fbx;
    sudo wget http://download.autodesk.com/us/fbx/2017/2017.1/fbx20171_fbxsdk_linux.tar.gz;
    sudo tar -xf "fbx20171_fbxsdk_linux.tar.gz";
    yes yes | sudo ./fbx20171_fbxsdk_linux /usr/local;
    cd ..;
  fi
- if [[ $TRAVIS_OS_NAME == "osx" ]]; then
    mkdir fbx;
    cd fbx;
    sudo wget http://download.autodesk.com/us/fbx/2017/2017.1/fbx20171_fbxsdk_clang_mac.pkg.tgz;
    sudo tar -xf "fbx20171_fbxsdk_clang_mac.pkg.tgz";
    sudo installer -pkg fbx20171_fbxsdk_clang_macos.pkg -target /;
    cd ..;
  fi
# Download and install emscripten sdk  
- if [[ $env_build_emscripten ]]; then
  fi

before_script:
- echo before_script-----------------------------------------------------------

# Setup default environment variables
- if [[ -z $env_src_root ]]; then export env_src_root=".."; fi
- if [[ -z $env_build_cpp11 ]]; then export env_build_cpp11=0; fi
- if [[ -z $env_build_fbx ]]; then export env_build_fbx=1; fi
- if [[ -z $env_build_data ]]; then export env_build_data=1; fi
- if [[ -z $env_build_howtos ]]; then export env_build_howtos=1; fi
- if [[ -z $env_build_samples ]]; then export env_build_samples=1; fi
- if [[ -z $env_build_simd_ref ]]; then export env_build_simd_ref=0; fi
- if [[ -z $env_build_tests ]]; then export env_build_tests=1; fi
- if [[ -z $env_cmake_configuration ]]; then export env_cmake_configuration=Debug; fi
- if [[ -z $env_cmake_cxx_compiler ]]; then export env_cmake_cxx_compiler=$CXX; fi
- if [[ -z $env_cmake_c_compiler ]]; then export env_cmake_c_compiler=$CC; fi
- if [[ -z $env_cmake_generator ]]; then export env_cmake_generator="Unix Makefiles"; fi
- if [[ $env_cmake_generator == "Unix Makefiles" ]]; then export env_cmake_generator_specific="-j2"; fi
- if [[ $EMSCRIPTEN ]]; then env_cmake_toolchain="-DCMAKE_TOOLCHAIN_FILE=$EMSCRIPTEN/cmake/Modules/Platform/Emscripten.cmake"; fi

# Display cmake version
- cmake --version

script:
- echo script------------------------------------------------------------------
- docker exec -it emscripten make helloworld.js
- make test
# Configure build
- mkdir build
- cd build
- echo $env_cmake_toolchain
- cmake -G "$env_cmake_generator" $env_cmake_toolchain -DCMAKE_CXX_COMPILER=$env_cmake_cxx_compiler -DCMAKE_C_COMPILER=$env_cmake_c_compiler -DCMAKE_BUILD_TYPE=$env_cmake_configuration -Dozz_build_cpp11=$env_build_cpp11 -Dozz_build_fbx=$env_build_fbx -Dozz_build_data=$env_build_data -Dozz_build_howtos=$env_build_howtos -Dozz_build_samples=$env_build_samples -Dozz_build_simd_ref=$env_build_simd_ref -Dozz_build_tests=$env_build_tests $env_src_root
# Build
- cmake --build ./ --config $env_cmake_configuration --use-stderr -- $env_cmake_generator_specific
# Test
- ctest --build-config $env_cmake_configuration --output-on-failure -- $env_cmake_generator_specific

after_success:
- echo after_success-----------------------------------------------------------

after_failure:
- echo after_failure-----------------------------------------------------------

before_deploy:
#- echo before_deploy-----------------------------------------------------------

deploy:
#- echo deploy------------------------------------------------------------------

after_deploy:
#- echo after_deploy------------------------------------------------------------

after_script:
#- echo after_script------------------------------------------------------------
